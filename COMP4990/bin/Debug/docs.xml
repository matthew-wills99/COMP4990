<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Utils">
            <summary>
            Some classes and methods commonly found within the project.
            </summary>
        </member>
        <member name="T:Utils.Chunk">
            <summary>
            Stores the position and tile indexes of a chunk.
            </summary>
        </member>
        <member name="M:Utils.Chunk.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new chunk object with the given parameters.
            </summary>
            <param name="x">X coordinate of the chunk</param>
            <param name="y">Y coordinate of the chunk</param>
            <param name="chunkSize">Length and width of the chunk in tiles</param>
            <remarks>
            <para>
            When a new chunk is created, the ChunkTiles array is 
            initialized to -1 to represent empty space.
            </para>
            </remarks>
        </member>
        <member name="M:Utils.Chunk.GetKey(Utils.Chunk)">
            <summary>
            Returns the chunk key of a given chunk object.
            </summary>
            <param name="chunk">The chunk object</param>
            <returns>A string with the chunk X and Y.</returns>
        </member>
        <member name="M:Utils.Chunk.GetKey">
            <summary>
            Returns the chunk key of the current chunk object.
            </summary>
            <returns>A string with the chunk X and Y.</returns>
        </member>
        <member name="T:Utils.Biome">
            <summary>
            Stores the type, position and tile index of a biome.
            </summary>
        </member>
        <member name="M:Utils.Biome.#ctor(Utils.BiomeEnum,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new biome object with the given parameters.
            </summary>
            <param name="type">Type of biome</param>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
            <param name="tileIndex">Index of the tile used to paint the biome, see <see cref="T:TileIndex"/></param>
        </member>
        <member name="M:Utils.Biome.GetBiomeKey">
            <summary>
            Returns the biome key of the current biome.
            </summary>
            <returns>A string in the format of <see cref="M:Utils.GetCoordinateKey(System.Int32,System.Int32,System.Int32,System.Int32)"/>.</returns>
        </member>
        <member name="M:Utils.Biome.GetBiomeType">
            <summary>
            Returns the biome type of the current biome.
            </summary>
            <returns>A BiomeEnum</returns>
        </member>
        <member name="T:Utils.Tree">
            <summary>
            Stores the position and object index of a tree.
            </summary>
        </member>
        <member name="M:Utils.Tree.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new tree object with the given parameters.
            </summary>
            <param name="index">Index of the tree, see <see cref="T:TileIndex"/></param>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
        </member>
        <member name="T:Utils.Rock">
            <summary>
            Stores the position and object index of a rock.
            </summary>
        </member>
        <member name="M:Utils.Rock.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new rock object with the given parameters.
            </summary>
            <param name="index">Index of the rock, see <see cref="T:TileIndex"/>s</param>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
        </member>
        <member name="T:Utils.Cactus">
            <summary>
            Stores the position and object index of a cactus.
            </summary>
        </member>
        <member name="M:Utils.Cactus.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new cactus object with the given parameters.
            </summary>
            <param name="index">Index of the cactus, see <see cref="T:TileIndex"/></param>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
        </member>
        <member name="T:Utils.Structure">
            <summary>
            Stores the position, radius, required space and index of a structure.
            </summary>
            <remarks>
            <para>
            im not really sure to be honest, ill change how structures work later.
            </para>
            </remarks>
        </member>
        <member name="M:Utils.Structure.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new structure object with the given parameters.
            </summary>
            <param name="index">Index of the structure, see <see cref="T:TileIndex"/></param>
            <param name="xRad">X radius</param>
            <param name="yUp">Tiles up from the origin</param>
            <param name="yDown">Tiles down from the origin</param>
        </member>
        <member name="T:Utils.BiomeEnum">
            <summary>
            Biome enum.
            </summary>
        </member>
        <member name="T:Utils.MapSize">
            <summary>
            Map size enum.
            </summary>
        </member>
        <member name="T:Utils.MenuState">
            <summary>
            Menu state enum.
            </summary>
        </member>
        <member name="T:Utils.BBTKey">
            <summary>
            not used. will remove later.
            </summary>
        </member>
        <member name="T:Utils.WorldData">
            <summary>
            A collection of data to be serialized and stored when saving or loading a world.
            </summary>
        </member>
        <member name="M:Utils.GetCoordinateKey(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the coordinate key based on the given parameters.
            </summary>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
            <returns>A string with the chunk and tile coordinates.</returns>
        </member>
        <member name="M:Utils.GetChunkKey(System.Int32,System.Int32)">
            <summary>
            Returns a chunk key based on the given parameters.
            </summary>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <returns>A string with the chunk coordinates.</returns>
        </member>
        <member name="M:Utils.ChunkToWorldPos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a Vector3Int converting chunk and tile positions to world pos.
            <seealso cref="M:Utils.WorldToChunkPos(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="cx">Chunk X</param>
            <param name="cy">Chunk Y</param>
            <param name="tx">Tile X</param>
            <param name="ty">Tile Y</param>
            <param name="chunkSize">Length and width of the chunk in tiles</param>
            <returns>A Vector3Int representing the world pos with z = 0.</returns>
        </member>
        <member name="M:Utils.WorldToChunkPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a Tuple converting world pos to chunk and tile positions.
            <seealso cref="M:Utils.ChunkToWorldPos(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="wx"></param>
            <param name="wy"></param>
            <param name="chunkSize"></param>
            <returns>A Tuple representing chunk and tile positions (cx, cy, tx, ty).</returns>
        </member>
        <member name="M:Utils.TileInChunk(System.Int32[0:,0:],System.Int32)">
            <summary>
            Returns true if a specified tile exists within the given array.
            not used currently.
            </summary>
            <param name="chunkTiles">ChunkTiles array</param>
            <param name="tile">Tile to search for</param>
            <returns>true if the tile exists in the array, false otherwise.</returns>
        </member>
        <member name="M:Utils.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the distance between 2 points
            </summary>
            <param name="x1">X of point 1</param>
            <param name="y1">Y of point 1</param>
            <param name="x2">X of point 2</param>
            <param name="y2">Y of point 2</param>
            <returns>A double representing the distance between 2 points</returns>
        </member>
    </members>
</doc>
